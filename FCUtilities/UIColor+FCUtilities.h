//
//  UIColor+FCUtilities.h
//  Part of FCUtilities by Marco Arment. See included LICENSE file for BSD license.
//

#import <UIKit/UIKit.h>

//#define SUPPORT_DUMPING_COLOR_VALUES

#ifdef SUPPORT_DUMPING_COLOR_VALUES
#import <TargetConditionals.h>
#endif

#define fc_UIColorFromRGB(r, g, b)     [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:1.0f]
#define fc_UIColorFromRGBA(r, g, b, a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define fc_UIColorFromHexInt(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

@interface UIColor (FCUtilities)

- (UIColor * _Nonnull)fc_colorByModifyingRGBA:(void (^ _Nonnull)(CGFloat * _Nonnull red, CGFloat * _Nonnull green, CGFloat * _Nonnull blue, CGFloat *_Nonnull alpha))modifyingBlock;
- (UIColor * _Nonnull)fc_colorByModifyingHSBA:(void (^ _Nonnull)(CGFloat * _Nonnull hue, CGFloat * _Nonnull saturation, CGFloat *_Nonnull brightness, CGFloat * _Nonnull alpha))modifyingBlock;
- (NSString * _Nonnull)fc_CSSColor;
+ (UIColor * _Nullable)fc_colorWithHexString:(NSString * _Nullable)hexString;
- (UIColor * _Nullable)fc_colorByBlendingWithColor:(UIColor * _Nullable)color2;

#ifdef SUPPORT_DUMPING_COLOR_VALUES
#if TARGET_OS_IOS
+ (void)fc_dumpSystemColorValues;
#endif
#endif

#pragma mark - Persistent, cross-platform system colors

// These methods provide the standard values for UIColor.systemRedColor, etc. in dark/light themes,
//  but hard-coded so they can be used on platforms such as watchOS that lack these color constants,
//  and to easily provide overridable theme settings (e.g. dark app theme while OS is in light mode)
//  while still using the standard system colors.

// An alternative to UIUserInterfaceStyle that defaults to "light" and is available on all platforms
typedef NS_ENUM(NSInteger, FCUserInterfaceStyle) {
    FCUserInterfaceStyleLight = 0,
    FCUserInterfaceStyleDark = 1,
};

// Color identifiers are strings of the format: "name#t:r,g,b,a#t:r,g,b,a…" or "#t:r,g,b,a#t:r,g,b,a…"
//     name (optional): the dynamic systemWhateverColor if set by the fc_system*Color methods below
//   Followed by a sequence of at least one of these:
//     #: delimiter
//     t: FCUserInterfaceStyle as integer
//     r, g, b, a: float values for the color components
//
//   For example, systemOrangeColor is represented as:
//     "systemOrangeColor#0:1,0.584314,0,1#1:1,0.623529,0.039216,1"
//
// These identifiers can be used to store and retrieve e.g. user color settings while retaining dynamic
//  color changes between themes. If a name isn't recognized, the RGBA values are used as a fallback.
//  If a recognized name is used, any RGBA values that follow it are ignored.
//
- (NSString * _Nullable)fc_colorIdentifier;
+ (UIColor * _Nullable)fc_colorFromIdentifier:(NSString * _Nullable)string theme:(FCUserInterfaceStyle)theme;

// Generated by SUPPORT_DUMPING_COLOR_VALUES
+ (UIColor * _Nullable)fc_systemColorWithName:(NSString * _Nonnull)name theme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemRedColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGreenColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemBlueColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_labelColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGrayColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_secondarySystemGroupedBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_secondaryLabelColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_tertiarySystemFillColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemFillColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_secondarySystemFillColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_secondarySystemBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_tertiarySystemBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGroupedBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_tertiarySystemGroupedBackgroundColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemOrangeColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_tertiaryLabelColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemYellowColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemPinkColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemMintColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemCyanColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemTealColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemPurpleColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemIndigoColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemBrownColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_quaternaryLabelColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_quaternarySystemFillColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGray2ColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGray3ColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGray4ColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGray5ColorWithTheme:(FCUserInterfaceStyle)theme;
+ (UIColor * _Nonnull)fc_systemGray6ColorWithTheme:(FCUserInterfaceStyle)theme;

@end
